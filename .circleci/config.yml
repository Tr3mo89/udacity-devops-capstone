version: 2.1

orbs:
  docker: circleci/docker@2.0.1

commands:
  install-dependencies:
    description: install dependencies
    steps:
      - run:
          name: install dependencies
          command: |
            pip install --upgrade pip && pip install -r requirements.txt
            pip install cython
            pip install pandas
  install-kubectl:
    description: install kubectl
    steps:
      - run:
          name: install kubectl
          command: |
            apt-get update
            apt-get install -y apt-transport-https ca-certificates curl
            curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
            echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
            apt-get update
            apt-get install -y kubectl
           #  kubectl version
  install-minikube:
    description: install minikube
    steps:
      - run:
          name: install minikube
          command: |
            curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
              && chmod +x minikube
            cp minikube /usr/local/bin && rm minikube
            minikube version
  install-eksctl:
    description: install eksctl on ubuntu
    steps:
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version
  install-aws:
    description: install aws
    steps:
      - run:
          name: install aws
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            aws --version

jobs:
  lint_dockerfile:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - install-dependencies
      - run:
          name: install lint
          command: |
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x /bin/hadolint
            hadolint --version
      - run:
          name: run lint
          command: |
            make lint
     # - save_cache:
     #     paths:
     #       - ./.capstone  
     #     key: v1-dependencies-{{ checksum "hello_app/requirements.txt" }}

  
  publish_docker_image:
    docker:
      - image: tr3mo89/ubuntu-20.04-docker
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run: 
          name: build image
          command: |
            docker build -t $dockerpath:latest .
      - run: 
          name: tag image
          command: |
            docker tag $dockerpath:latest $dockerpath:latest
      - run:
          name: login to dockerhub
          command: |
            docker login -u $dockerId -p $dockerAuth
      - run:
          name: push image
          command: |
            docker push $dockerpath:latest

  create_eks_cluster:
    docker:
      - image: tr3mo89/ubuntu-20.04-docker
    steps:
      - checkout
      - install-eksctl
      - install-aws
      - run:
          name: create cluster
          command: |
            aws eks describe-cluster --name hello-app > /dev/null
            if [ $? -eq 0 ]
            then
              echo "Cluster already exists"
            else
              echo "Create Cluster"
              eksctl create cluster --config-file=cluster.yml
            fi 
            
      #- run:
      #    name: create cluster via ansible
      #    command: |
      #      cd .circleci/ansible
      #      ansible-playbook -i inventory.txt deploy-infrastructure.yml -vvv

  deploy_kubernetes_app:
    docker:
      - image: tr3mo89/ubuntu-20.04-docker
    steps:
      - checkout
      - install-kubectl
      - install-aws
      - run:
          name: connect to eks cluster
          command: | 
            aws eks --region eu-central-1 update-kubeconfig --name hello-app
            kubectl get svc
      - run: 
          name: deploy app
          command: |
            kubectl apply -f deployment.yml 
      - run:
          name: watch rollout
          command: | 
            kubectl rollout status deployment.apps/udastone-deployment
      - run:
          name: list kubectl resources
          command: |
            echo "List Deployments:"
            kubectl get deployments
            echo ""
            echo "List Services:"
            kubectl get svc
            echo ""
            echo "List Pods:"
            kubectl get pods

workflows:
  application-pipeline:
    jobs:
      - lint_dockerfile
      - publish_docker_image:
           requires: [lint_dockerfile]
      - create_eks_cluster #:
      #     requires: [publish_docker_image]
      # - deploy_kubernetes_app:
      #     requires: [create_eks_cluster]
      - deploy_kubernetes_app